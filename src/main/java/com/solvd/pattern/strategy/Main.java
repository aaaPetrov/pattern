package com.solvd.pattern.strategy;

/**
 * Везде, где есть выбор в программе, от которого зависит каким способом мы будем совершать одно и то же действие.
 * К примеру оплата какого-то товара в интернет магазине: карточкой, c электронного кошелька, оплата по рассчётному счёту.
 * К примеру: Отрисовщик элементов в игровом движке. Элементы могут быть разные с кучей своих уникальных параметров, но у всех у них будет
 * общий интерфейс с функцией draw(). Отрисовщику всё равно какой элемент прийдёт, он просто его отрисует из нужной имплементации.
 * Ну и примеров можно привести тысячи, потому что суть это паттерна чисто в полиморфизме.
 * А Я уверен, что полиморфизм есть почти в любом реальном проекте :)
 */
public class Main {

    public static void main(String[] args) {
        Traveler traveler = new Traveler("Rick");
        traveler.travel();

        traveler.setWayToTrip(new Ship());
        traveler.travel();

        traveler.setWayToTrip(new Plane());
        traveler.travel();
    }

}
